# -*- coding: utf-8 -*-
"""INTRODUCTORY PROGRAMMING, DATABASES AND STATISTICS.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vKWuBWp_x4bZ_fe3ad-peM1nOg2kiPNO
"""

import pandas as pd
from pandas import DataFrame
import numpy as np

file_path=r"/content/stroke_dataset (1) (1).csv"

data=pd.read_csv(file_path)

data.head()

data.describe(include='all')

# Define varibales to to replace the outliers
min_age=10
max_age=94
min_GCS=3
max_GCS=15

# Condition to replace the outliers
data_cleaned=data[
(data['Age']>=min_age) & (data['Age']<=max_age) &
(data['GCS']>= min_GCS) & (data['GCS']<=max_GCS)
]

data_cleaned.describe()

"""# Question 1"""

import matplotlib.pyplot as plt

lables=['0-10','11-20','21-30','31-40','41-50','51-60','61-70','71-80','81-90','91-100']
bins=[0,10,20,30,40,50,60,70,80,90,100]

labels = lables  # Assign the list to the correct variable name 'labels'
age_groups=pd.cut((data_cleaned['Age']), bins=bins, labels=labels)

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
import numpy as np
# %matplotlib inline


# Plotting the histogram
plt.hist(data_cleaned['Age'], bins=bins, color='purple',edgecolor='black',linewidth=2)
plt.xlabel("Age")
plt.ylabel("Frequency")
plt.title("Age Distribution Histogram")
plt.show()

"""# Question 2"""

# df.groupby(['Gender', 'TobaccoUse']): Groups the data by Gender and TobaccoUse
# .size(): Counts the number of occurrences in each group.
# .reset_index(name='Count'): Converts the grouped object into a DataFrame and renames the count column to Count
gender_counts = data_cleaned.groupby(['TobaccoUse','Gender']).size().reset_index(name='Count')

print(gender_counts)

df=pd.DataFrame(data_cleaned)
import pandas as pd

# df.groupby(['Gender', 'TobaccoUse']): Groups the data by Gender and TobaccoUse
# .size(): Counts the number of occurrences in each group.
# .reset_index(name='Count'): Converts the grouped object into a DataFrame and renames the count column to Count
stroke_gender_counts = data_cleaned.groupby(['Gender','StrokeType']).size().reset_index(name='Count')

# Now, 'stroke_gender_counts' has the 'Count' column. Use this DataFrame for pivoting:
gender_count_stroke = stroke_gender_counts.pivot(index='StrokeType', columns='Gender', values='Count')

stroke_gender_counts.plot(kind='bar', stacked=False, color=['purple','red'], figsize=(10, 6),edgecolor='black',linewidth=2)
plt.title('Age Distribution by Gender for Stroke type')
plt.xlabel('Gender')
plt.ylabel('Number of Patients')
plt.xticks(rotation=0)
plt.legend(title='Gender')
plt.grid(axis='y')
plt.show()

# Calculate counts for Tobacco Use vs Gender
gender_tobacco_counts = data_cleaned.pivot_table(index='StrokeType', columns='Gender', aggfunc='size', fill_value=0)

# Plot the bar chart
gender_tobacco_counts.plot(kind='bar', figsize=(6, 6), color=['red', 'black'])

# Customize the chart
plt.title('Tobacco Use vs. Gender', fontsize=16)
plt.xlabel('Tobacco Use', fontsize=14)
plt.ylabel('Number of Patients', fontsize=14)
plt.xticks(rotation=0)
plt.legend(title='Gender', fontsize=12)
plt.grid(axis='y', linestyle='--', alpha=0.7)

# Show the plot
plt.tight_layout()
plt.show()

# Filter data for males and females
male_data = data_cleaned[data_cleaned['Gender'] == 'Male']
female_data = data_cleaned[data_cleaned['Gender'] == 'Female']

# Calculate counts for Tobacco Use vs Gender for males and females
male_tobacco_counts = male_data['TobaccoUse'].value_counts()
female_tobacco_counts = female_data['TobaccoUse'].value_counts()

# Plot for Male patients
plt.figure(figsize=(8, 6))
male_tobacco_counts.plot(kind='bar', color='blue')
plt.title('Tobacco Use vs. Male Patients', fontsize=16)
plt.xlabel('Tobacco Use', fontsize=14)
plt.ylabel('Number of Male Patients', fontsize=14)
plt.xticks(rotation=0)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()

# Plot for Female patients
plt.figure(figsize=(8, 6))
female_tobacco_counts.plot(kind='bar', color='pink')
plt.title('Tobacco Use vs. Female Patients', fontsize=16)
plt.xlabel('Tobacco Use', fontsize=14)
plt.ylabel('Number of Female Patients', fontsize=14)
plt.xticks(rotation=0)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()

# Calculate counts for Tobacco Use vs Gender
stroke_type_counts = data_cleaned.pivot_table(index='StrokeType', columns='Gender', aggfunc='size', fill_value=0)

# Plot the bar chart
gender_tobacco_counts.plot(kind='bar', figsize=(6, 6), color=['red', 'black'])# Customize the chart
plt.title('Stroke type vs. Gender', fontsize=16)
plt.xlabel('Stroke Type', fontsize=14)
plt.ylabel('Number of Patients', fontsize=14)
plt.xticks(rotation=0)
plt.legend(title='Gender', fontsize=12)
plt.grid(axis='y', linestyle='--', alpha=0.7)
# Show the plot
plt.tight_layout()
plt.show()

"""# Question 3"""

# groupby() is the function of Pandas size()
# Count occurrences of each Age Group by Gender
age_gender = data_cleaned.groupby(['InHospitalMortality', 'Gender']).size().unstack(fill_value=0)
print(age_gender)

# Plot the Data
age_gender.plot(kind='bar', stacked=True, color=['purple', 'red'], figsize=(6, 6))
plt.title('Genderwise Inhospital Mortality')
plt.xlabel('Gender')
plt.ylabel('Number of Patients')
plt.xticks(rotation=0)
plt.legend(title='Gender')
plt.show()

import pandas as pd
# Calculate mortality counts for patients with and without previous strokes
mortality_counts = pd.crosstab(data_cleaned['InHospitalMortality'],data_cleaned['PreviousStroke'])

# Plot the bar chart
mortality_counts.plot(kind='bar', figsize=(6, 6), color=['purple', 'pink'])

# Customize the chart
plt.title('Mortality Rates: Patients with & without Previous Strokes', fontsize=16)
plt.xlabel('Previous Stroke', fontsize=14)
plt.ylabel('Number of Patients', fontsize=14)
plt.xticks(rotation=0)
plt.legend(title='Mortality', fontsize=12)
plt.grid(axis='y', linestyle='', alpha=0.7)

# Show the plot
plt.tight_layout()
plt.show()

"""#Question 5:"""

severity_mapping = {
    0: "Minor",
    1: "Minor",
    2: "Moderate",
    3: "Moderate",
    4: "Severe",
    5: "Severe",
    6: "Death"
}

# Add a new column with the categorized severity levels
data_cleaned['Severity_level'] = data_cleaned['ModifiedRankinScore'].map(severity_mapping)
print(data_cleaned)

"""# Question 6:"""

import pandas as pd
df=pd.DataFrame(data_cleaned)

mortality_rates = data_cleaned.groupby(['InHospitalMortality','Severity_level',]).size().reset_index(name='Count')

import pandas as pd

# Sample data (replace with your actual data)
data = {'InHospitalMortality': [0, 1, 2, 3],
        'Severity_level': ['Minor', 'Moderate', 'Death', 'Severe'],
        'Count': [381, 438, 44, 87]}

df = pd.DataFrame(data)

# Create a new column 'Mortality_Percentage' based on the conditions
df['Mortality_Percentage'] = df['Severity_level'].apply(lambda x: 0 if x in ['Minor', 'Moderate'] else 100)

print(df)

df['Mortality_Percentage'].plot(kind='bar', stacked=False, color=['grey','black'], figsize=(10, 6),edgecolor='black',linewidth=2)
plt.title('Age Distribution by Gender for Stroke type')
plt.xlabel('Gender')
plt.ylabel('Number of Patients')
plt.xticks(rotation=0)
plt.legend(title='Gender')
plt.grid(axis='y')
plt.show()

plt.figure(figsize=(6, 6),edgecolor='black',linewidth=4)
plt.bar(df['Severity_level'], df['Mortality_Percentage'], color=['pink','skyblue'])

# Set labels and title
plt.xlabel('Severity Level')
plt.ylabel('Mortality Percentage')
plt.title('Mortality Percentage by Severity Level')
plt.xticks(rotation=0)
plt.legend(title='Severity Level')
plt.show()

# Show the plot
plt.show()

gender_mortality_rates = data_cleaned.groupby(['Gender','Severity_level',]).size().reset_index(name='Count')

gender_mortality_rates

# Plot the Data
gender_mortality_rates.plot(kind='bar', stacked=True, color=['blue', 'pink','red'], figsize=(6, 6))
plt.title('Genderwise Inhospital Mortality')
plt.xlabel('Gender')
plt.ylabel('Number of Patients')
plt.xticks(rotation=0)
plt.legend(title='Gender')
plt.show()

gender_data = data_cleaned.groupby(['Severity_level', 'Gender']).size().unstack(fill_value=0)

gender_data

gender_mortality_rates

# Plot the Data
gender_data.plot(kind='bar', stacked=True, color=['red', 'black',], figsize=(6, 6))
plt.title('Genderwise Mortality')
plt.xlabel('Severity')
plt.ylabel('Number of Patients')
plt.xticks(rotation=0)
plt.legend(title='Gender')
plt.show()

